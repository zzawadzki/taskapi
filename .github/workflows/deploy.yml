name: Build and Deploy

# Trigger pipeline on push to main, PRs to main, or manual dispatch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Environment variables used across all jobs
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: taskapi

jobs:
  # JOB 1: Run tests to ensure code quality
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java 21 for building and testing
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Run the test suite
      - name: Run tests
        run: mvn test

      # Upload test results for review
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/

  # JOB 2: Build Docker image and push to registry
  build-and-push:
    runs-on: ubuntu-latest
    # Only run this job if tests pass
    needs: test
    # Only build and push on main branch pushes, not PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Permissions needed to push to GitHub Container Registry
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker image (tags and labels)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with 'latest' for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with git SHA for traceability
            type=sha,prefix={{branch}}-
            # Tag with git tag if it exists
            type=ref,event=tag

      # Build and push Docker image with layer caching
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Use GitHub Actions cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Run security scan on the built image
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          # Fail the build on HIGH or CRITICAL vulnerabilities
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      # Upload security scan results as artifact
      - name: Upload Trivy scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

  # JOB 3: Deploy to Kubernetes cluster
  deploy:
    runs-on: ubuntu-latest
    # Only run this job if build and push succeeds
    needs: build-and-push
    # Only deploy on main branch pushes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Use production environment with protection rules
    environment: production

    steps:
      # Checkout the repository code (needed for k8s manifests)
      - name: Checkout code
        uses: actions/checkout@v4

      # Install kubectl CLI tool
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      # Configure kubectl with kubeconfig from GitHub secrets
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      # Update the image in the Kubernetes deployment
      - name: Update deployment image
        run: |
          kubectl set image deployment/taskapi-deployment \
            taskapi=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -n ${{ env.K8S_NAMESPACE }}

      # Wait for the rollout to complete successfully
      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/taskapi-deployment \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=5m

      # Run a smoke test to verify the deployment
      - name: Run smoke test
        run: |
          # Get the service endpoint
          SERVICE_IP=$(kubectl get svc taskapi-service -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://${SERVICE_IP}/actuator/health || exit 1

          echo "Smoke test passed!"

      # Notify on deployment failure
      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed! Check the logs for details."
          # Add notification logic here (Slack, email, etc.)
