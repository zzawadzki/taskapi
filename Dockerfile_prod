# Production Dockerfile for x86_64/AMD64 (DigitalOcean)
# Multi-stage build for optimal security and size

FROM --platform=linux/amd64 maven:3.9-eclipse-temurin-21 AS build
WORKDIR /app

# Copy pom.xml and download dependencies (cached layer)
COPY pom.xml .
RUN mvn dependency:go-offline -B

# Copy source and build
COPY src ./src
RUN mvn clean package -DskipTests

FROM --platform=linux/amd64 alpine:latest AS healthcheck
RUN apk add --no-cache curl dumb-init && \
    # Create a clean directory structure \
    mkdir -p /healthcheck-bins/bin /healthcheck-bins/libs && \
    # Copy curl and dumb-init binaries \
    cp /usr/bin/curl /healthcheck-bins/bin/ && \
    cp /usr/bin/dumb-init /healthcheck-bins/bin/ && \
    # Find and copy all dependencies \
    ldd /usr/bin/curl | grep '=>' | awk '{print $3}' | xargs -I {} cp -L {} /healthcheck-bins/libs/ && \
    # Copy the dynamic linker separately \
    cp /lib/ld-musl-*.so.1 /healthcheck-bins/libs/

# Production stage with Chainguard JRE
FROM --platform=linux/amd64 cgr.dev/chainguard/jre:latest

WORKDIR /app

# Copy curl and dumb-init binaries
COPY --from=healthcheck /healthcheck-bins/bin/curl /usr/bin/curl
COPY --from=healthcheck /healthcheck-bins/bin/dumb-init /usr/bin/dumb-init

# Copy all shared libraries
COPY --from=healthcheck /healthcheck-bins/libs/ /usr/lib/

# Copy the JAR from build stage
COPY --from=build --chown=nonroot:nonroot /app/target/*.jar app.jar

EXPOSE 8080

# Health check using Spring Boot Actuator
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# Entrypoint with dumb-init and Java options
ENTRYPOINT ["dumb-init", "--"]
CMD ["java", "-XX:+UseContainerSupport", "-XX:MaxRAMPercentage=75.0", "-jar", "app.jar"]
